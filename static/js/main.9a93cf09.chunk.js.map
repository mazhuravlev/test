{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Vec2","x","y","Object","classCallCheck","this","other","angle","sin","Math","cos","divide","length","sqrt","Obj","mass","position","velocity","forces","force","push","dt","acceleration","resultingForce","multiply","add","reduce","a","c","Display","canvas","_this","ctx","onClick","canvasBBox","offset","getContext","Error","getBoundingClientRect","onclick","e","clickPos","fromCanvas","clientX","left","clientY","top","clearRect","width","height","f","beginPath","moveTo","lineTo","eval","stroke","obj","canvasObjPos","toCanvas","getPosition","substract","arc","PI","s","strokeStyle","getForces","forEach","sumForce","ox","dOffset","vec2","gravity","terrainExpr","math","terrainExprDerivative","App","props","_this2","possibleConstructorReturn","getPrototypeOf","call","cRef","React","createRef","keyDown","renderScore","react_default","createElement","Fragment","round","state","_this3","setPosition","current","display","document","addEventListener","keyCode","console","log","pos","setVelocity","lt","flag","requestAnimationFrame","step","t","objPos","terrainY","tg","Î¸","atan","fN","getVelocity","rotate","applyForce","clear","renderObj","renderTerrain","update","setState","className","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a93cf09.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as math from 'mathjs';\nimport { object } from 'prop-types';\n\nclass Vec2 {\n  constructor(public readonly x: number, public readonly y: number) {\n  }\n\n  public add(other: Vec2) {\n    return new Vec2(this.x + other.x, this.y + other.y);\n  }\n\n  public substract(other: Vec2) {\n    return new Vec2(this.x - other.x, this.y - other.y);\n  }\n\n  public divide(x: number) {\n    return new Vec2(this.x / x, this.y / x);\n  }\n\n  public multiply(x: number) {\n    return new Vec2(this.x * x, this.y * x);\n  }\n\n  public rotate(angle: number) {\n    const { x, y } = this;\n    const sin = Math.sin(angle);\n    const cos = Math.cos(angle);\n    return new Vec2(x * cos - y * sin, x * sin + y * cos);\n  }\n\n  public normalize() {\n    return this.divide(this.length);\n  }\n\n  public get length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n}\n\nclass Obj {\n  constructor(public readonly mass: number) { }\n\n  private position = new Vec2(0, 0);\n  private velocity = new Vec2(0, 0);\n  private forces: Vec2[] = [];\n\n  public setPosition(position: Vec2) {\n    this.position = position;\n  }\n\n  public setVelocity(velocity: Vec2) {\n    this.velocity = velocity;\n  }\n\n  public getForces() {\n    return this.forces;\n  }\n\n  public getVelocity() {\n    return this.velocity;\n  }\n\n  public getPosition() {\n    return this.position;\n  }\n\n  public applyForce(force: Vec2) {\n    this.forces.push(force);\n  }\n\n  public update(dt: number) {\n    const acceleration = this.resultingForce.divide(this.mass);\n    this.velocity = acceleration.multiply(dt).add(this.velocity);\n    this.position = this.velocity.multiply(dt).add(this.position);\n    this.forces = [];\n  }\n\n  public get resultingForce() {\n    return this.forces.reduce((a, c) => a.add(c), new Vec2(0, 0));\n  }\n}\n\nclass Display {\n  private ctx: CanvasRenderingContext2D;\n  public onClick?: (position: Vec2) => void;\n  canvasBBox: ClientRect | DOMRect;\n  public offset = 0;\n\n  constructor(private canvas: HTMLCanvasElement) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) throw new Error();\n    this.ctx = ctx;\n    this.canvasBBox = canvas.getBoundingClientRect();\n    canvas.onclick = e => {\n      if (this.onClick) {\n        const clickPos = this.fromCanvas(new Vec2(e.clientX - this.canvasBBox.left + this.offset, e.clientY - this.canvasBBox.top));\n        this.onClick(clickPos);\n      }\n    };\n  }\n\n  public clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  public renderTerrain(f: math.EvalFunction) {\n    const { ctx } = this;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    for (let x = 0; x < this.canvas.width; x += 6) {\n      ctx.lineTo(x, this.canvas.height - f.eval({ x: x + this.offset }));\n    }\n    ctx.stroke();\n  }\n\n  public renderObj(obj: Obj) {\n    const { ctx } = this;\n    const size = 6;\n    const forceDrawMultiplier = 30000;\n    const canvasObjPos = this.toCanvas(obj.getPosition()).substract(new Vec2(this.offset, 0));\n    ctx.beginPath();\n    ctx.arc(canvasObjPos.x, canvasObjPos.y, size, 0, 2 * Math.PI);\n    ctx.stroke();\n\n    ctx.beginPath();\n    const s = ctx.strokeStyle;\n    ctx.strokeStyle = \"#0000aa\";\n    obj.getForces().forEach(force => {\n      ctx.moveTo(canvasObjPos.x, canvasObjPos.y);\n      ctx.lineTo(canvasObjPos.x + force.x * forceDrawMultiplier, canvasObjPos.y - force.y * forceDrawMultiplier);\n    });\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.strokeStyle = \"#dd2311\";\n    const sumForce = obj.resultingForce;\n    ctx.moveTo(canvasObjPos.x, canvasObjPos.y);\n    ctx.lineTo(canvasObjPos.x + sumForce.x * forceDrawMultiplier, canvasObjPos.y - sumForce.y * forceDrawMultiplier);\n    ctx.stroke();\n    ctx.strokeStyle = s;\n    const ox = this.canvas.width / 2 - canvasObjPos.x;\n    const dOffset = ox * ox / 10000;\n    if (canvasObjPos.x > this.canvas.width / 2) {\n      this.offset += dOffset;\n    } else {\n      this.offset -= dOffset;\n    }\n  }\n\n  private fromCanvas(vec2: Vec2): Vec2 {\n    return new Vec2(vec2.x, this.canvas.height - vec2.y);\n  }\n\n  private toCanvas(vec2: Vec2): Vec2 {\n    return new Vec2(vec2.x, this.canvas.height - vec2.y);\n  }\n}\n\nconst gravity = (mass: number) => new Vec2(0, mass * -0.000098);\n\nconst terrainExprString = 'sin(x/30) * 30 + 100';\n// const terrainExprString = ' ((x-400)/15)^2 + 125';\nconst terrainExpr = math.compile(terrainExprString);\nconst terrainExprDerivative = math.derivative(terrainExprString, 'x');\n\nconst collisionTheshold = 3;\n\ninterface AppState {\n  offset: number;\n}\n\nclass App extends Component<{}, AppState> {\n  private cRef = React.createRef<HTMLCanvasElement>();\n  private keyDown = false;\n\n  constructor(props: any) {\n    super(props);\n    this.state = { offset: 0 };\n  }\n\n  public componentDidMount() {\n    const obj = new Obj(10);\n    obj.setPosition(new Vec2(450, 450));\n\n    if (!this.cRef.current) return;\n    const display = new Display(this.cRef.current);\n    document.addEventListener('keydown', e => {\n      switch (e.keyCode) {\n        case 32:\n          this.keyDown = true;\n          break;\n        case 37:\n          display.offset -= 10;\n          break;\n        case 39:\n          display.offset += 10;\n          break;\n        default:\n          console.log(e.keyCode);\n      }\n    });\n    document.addEventListener('keyup', e => {\n      switch (e.keyCode) {\n        case 32:\n          this.keyDown = false;\n          break;\n      }\n    });\n    display.onClick = (pos) => {\n      obj.setPosition(pos);\n      obj.setVelocity(new Vec2(0, 0));\n    };\n    let lt = 0;\n    let flag = false;\n    const step = (t: number) => {\n      const objPos = obj.getPosition();\n      const terrainY = terrainExpr.eval({ x: objPos.x });\n      if (objPos.y - terrainY < collisionTheshold) {\n        const tg = terrainExprDerivative.eval({ x: objPos.x });\n        const Î¸ = Math.atan(tg);\n        const fN = gravity(obj.mass).multiply(Math.cos(Î¸) * obj.getVelocity().length * 100).rotate(Î¸ - Math.PI);\n        if (!flag) {\n          const v = obj.getVelocity();\n          // obj.setVelocity(new Vec2(v.x * Math.sin(Î¸), v.y * Math.cos(Î¸)));\n          flag = true;\n        }\n        obj.applyForce(fN);\n      } else {\n        flag = false;\n      }\n      if (this.keyDown) obj.applyForce(gravity(obj.mass));\n      obj.applyForce(gravity(obj.mass));\n\n      display.clear();\n      display.renderObj(obj);\n      display.renderTerrain(terrainExpr);\n      if (lt) {\n        const dt = t - lt;\n        obj.update(dt);\n      }\n      lt = t;\n      this.setState({ offset: display.offset });\n      requestAnimationFrame(step);\n    }\n    requestAnimationFrame(step);\n  }\n\n  private renderScore = () => {\n    return (\n      <>\n        <div>{Math.round(this.state.offset / 10)}</div>\n        <div>Ð½Ñ Ð²ÑÐµ, Ð¿ÑÐ¾Ð¸Ð³ÑÐ°Ð»</div>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"score\">{this.renderScore()}</div>\n        <canvas ref={this.cRef} width=\"900\" height=\"900\" />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}